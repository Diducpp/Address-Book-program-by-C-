#include<iostream>
#include<string>
#define MAX 1000//宏定义的好处 方便修改
using namespace std;

void ShowMenu()
{
	cout << "*****************************" << endl;
	cout << "********1.添加联系人*********" << endl;
	cout << "********2.显示联系人*********" << endl;
	cout << "********3.删除联系人*********" << endl;
	cout << "********4.查找联系人*********" << endl;
	cout << "********5.修改联系人*********" << endl;
	cout << "********6.清空联系人*********" << endl;
	cout << "********0.退出通讯录*********" << endl;
	cout << "*****************************" << endl;
}
struct person//定义父类结构体person
{
	string name;
	int age;
	string sex;
	string address;
};

struct addressbook//定义子类结构体 addressbook
{
	int size;
	struct person array[MAX]; //结构体嵌套 注意子类要放在父类之后
};
int Insert(addressbook *ads)//结构体指针 用来接收地址
{
	cout << "请添加您的姓名" << endl;
	if (ads->size>=MAX)
	{
		return 0;
	}
	else
	{
		string zname;
		cin >> zname;
		ads->array[ads->size].name = zname;
	}

	cout << "请添加您的年龄" << endl;
	if (ads->size >= MAX)
	{
		return 0;
	}
	else
	{
		int zage;
		cin >> zage;
		ads->array[ads->size].age = zage;
	}

	cout << "请添加您的性别" << endl;
	if (ads->size >= MAX)
	{
		return 0;
	}
	else
	{
		string zsex;
		cin >> zsex;
		ads->array[ads->size].sex = zsex;
	}

	cout << "请添加您的地址" << endl;
	if (ads->size >= MAX)
	{
		return 0;
	}
	else
	{
		string zaddress;
		cin >> zaddress;
		ads->array[ads->size].address = zaddress;
	}

	ads->size++;
	cout << "谢谢您，添加成功" << endl;
};
int Show(addressbook * ads)
{
	if (ads->size == 0)
	{
		cout << "当前联系人为空" << endl;
		return 0;
	}
	else
	{
		for (int i = 0; i < ads->size; i++)
		{
			cout << ads->array[i].address << ads->array[i].age << ads->array[i].name << ads->array[i].sex << endl;
		}
	}
};
int Found(addressbook* ads, string name)
{
	for (int i = 0; i < ads->size; i++)
	{
		if (ads->array[i].name == name)
		{
			return i;
		}
		else
		{
			return -1;
		}
	}
};
void Delete(addressbook* ads)
{
	string name;
	cin >> name;
	int ret = Found(ads, name);
	if (ret != -1)
	{
		for (int i = ret; i < ads->size; i++)
		{
			ads->array[i] = ads->array[i + 1];
		}
	}
	else
	{
		cout << "查无此人" << endl;
	};

	ads->size--;
	cout << "删除成功" << endl;
	system("cls");
};
void Select(addressbook* ads)
{
	string name;
	cin >> name;
	int ret = Found(ads, name);
	if (ret != -1)
	{
		cout << ads->array[ret].address << ads->array[ret].name << ads->array[ret].age << endl;
	}
	else
	{
		cout << "查无此人" << endl;
	};
	system("pause");
};
void Modify(addressbook* ads)
{
	cout << "请输入您要查找的名字" << endl;
	string name;
	cin >> name;
	int ret = Found(ads, name);
	if (ret != -1)
	{
		string name;
		cout << "请输入您要修改的名字" << endl;
		cin >> name;
		ads->array[ret].name = name;

		int age;
		cout << "请输入您要修改的年龄" << endl;
		cin >> age;
		ads->array[ret].age = age;

		string sex;
		cout << "请输入您要修改的性别" << endl;
		cin >> sex;
		ads->array[ret].sex = sex;

		string address;
		cout << "请输入您要修改的地址" << endl;
		cin >> address;
		ads->array[ret].address = address;

	}
	else
	{
		cout << "查无此人" << endl;
	};
	system("pause");
}
void Clean(addressbook *ads)
{
	ads->size=0;
	cout << "清空完成" << endl;
}
int main()
{
	addressbook ads;//定义一个adressbook类型的指针变量
	ads.size = 0;
	
	while (true)
	{
		ShowMenu();//展示菜单
		int select;
		cout << "请输入选择" << endl;
		cin >> select;
		switch (select)
		{

		case 0:
			cout << "欢迎您下次再来" << endl;
			return 0;
			break;
		case 1:
			Insert(&ads);//添加联系人 地址的值传递形参可以影响实参
			system("pause");
			break;
		case 2:
			Show(&ads);
			system("pause");
			break;
		case 3:
		{
			string name;
			cin >> name;
			Found(&ads, name);
			if (Found(&ads, name) == -1)
			{
				cout << "查无此人" << endl;
			}
			else
			{
				cout << "存在用户" << endl;
			}
			Delete(&ads);
			system("pause");
			break;
		}
		case 4:
			Select(&ads);
			break;
		case 5:
			Modify(&ads);
			break;
		case 6:
			Clean(&ads);
			break;
		}
	}
}
